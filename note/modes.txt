创建型模式：
1.单例模式：某个类只能生成一个实例，该类提供类一个全局访问点供外部获取该实例，其拓展是有限多例模式。
2.原型模式：将某个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。
3.工厂方法模式：定义一个用于创建产品的接口，由子类决定生产什么产品。
4.抽象工厂模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。
5.建造者模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。

结构型模式：
1.代理模式：对某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。
2.适配器模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。
3.桥接模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替集成关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。
4.装饰模式：动态的给对象增加一些职责，即增加其额外的功能。
5.外观模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。
6.享元模式：运用共享技术来有效的支持大量细粒度对象的复用。
7.组合模式：将对象组合成树状层次结构，使对象对单个对象和组合对象具有一致的访问性。

行为型模式：
1.模板方法模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。
2.策略模式：定义类一系列算法，将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。
3.命令模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。
4.责任链模式：把请求重链中的一个对象传到下一个对象，知道请求被相应为止。通过这种方式去除对象之间的耦合。
5.状态模式：允许一个对象在其内部状态发生改变时改变其行为能力。
6.观察者模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。
7.中介者模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象的耦合度，使原有对象之间不必相互了解。
8.迭代器模式：提供一种方法来顺序访问据诶对象中的一系列数据，从而不暴露聚合对象的内部表示。
9.访问者模式：在不改变集合元素的前提下，为一个集合中的每个元素提多种访问方式，即每个元素有多个访问者对象访问。
10.备忘录模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。
11.解释器模式：提供如何定义语言的文化，以及对语言句子的解释方法，即解释器。